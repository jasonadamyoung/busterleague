include:
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml


license_scanning:
  variables:
    SETUP_CMD: sh build/license_compliance.sh

.docker_stages: &docker_stages
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  before_script:
    - docker info
    - docker login ${CI_REGISTRY} -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}
  after_script:
    - docker logout ${CI_REGISTRY}

stages:
  - test
  - build
  - push_current
  - deploy

Production Build:
  <<: *docker_stages
  stage: build
  tags:
    - gitlab-org-docker 
  only:
    - production
  script:
    - docker pull ${CI_REGISTRY_IMAGE}:production || true
    - >
      docker build
      --pull
      --build-arg VCS_REF=${CI_COMMIT_SHA}
      --build-arg VCS_URL=${CI_PROJECT_URL}
      --cache-from ${CI_REGISTRY_IMAGE}:production
      --tag ${CI_REGISTRY_IMAGE}:git-${CI_COMMIT_SHORT_SHA}
      --file cluster.dockerfile
      .
    - docker push ${CI_REGISTRY_IMAGE}:git-${CI_COMMIT_SHORT_SHA}

Demo Build:
  <<: *docker_stages
  stage: build
  tags:
    - gitlab-org-docker 
  only:
    - demo
  script:
    - docker pull ${CI_REGISTRY_IMAGE}:demo || true
    - >
      docker build
      --pull
      --build-arg VCS_REF=${CI_COMMIT_SHA}
      --build-arg VCS_URL=${CI_PROJECT_URL}
      --cache-from ${CI_REGISTRY_IMAGE}:demo
      --tag ${CI_REGISTRY_IMAGE}:git-${CI_COMMIT_SHORT_SHA}
      --file cluster.dockerfile
      .
    - docker push ${CI_REGISTRY_IMAGE}:git-${CI_COMMIT_SHORT_SHA}

Push current:
  <<: *docker_stages
  variables:
    GIT_STRATEGY: none
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  stage: push_current
  only:
    - production
    - demo
  tags:
    - gitlab-org-docker 
  script:
    - docker pull ${CI_REGISTRY_IMAGE}:git-${CI_COMMIT_SHORT_SHA}
    - docker tag ${CI_REGISTRY_IMAGE}:git-${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}

Deployment:
  stage: deploy
  image: registry.gitlab.com/rambleon/kustomize-image:latest
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "GitLab Runner"
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - git config --list
    - git clone --recurse-submodules -j8 git@gitlab.com:rambleon/kas-deploy.git /tmp/kas-deploy
    - pushd .
    - cd deploy/overlays/production
    - kustomize edit set image registry.gitlab.com/rambleon/busterleague=registry.gitlab.com/rambleon/busterleague:git-${CI_COMMIT_SHORT_SHA}
    - popd
    - kustomize build deploy/overlays/production > /tmp/kas-deploy/busterleague.yml
    - cd /tmp/kas-deploy
    - git add busterleague.yml
    - git commit -m "Updated busterleague manifest" || echo "No changes, nothing to commit!"
    - git push origin main
  tags:
    - gitlab-org-docker 
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: always
