---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: "{{ kube_resource_name }}-redis-pvc"
  labels:
    app: "{{ kube_resource_name }}-redis"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "1Gi"
  storageClassName: "{{ redis_storage_class }}"
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ kube_resource_name }}-redis"
  namespace: "{{ kube_namespace }}"
  labels:
    app: "{{ kube_resource_name }}-redis"
spec:
  type: ClusterIP
  ports:
  - port: 6379
    name: redis
  selector:
    app: "{{ kube_resource_name }}-redis"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ kube_resource_name }}-redis"
  namespace: "{{ kube_namespace }}"
spec:
  selector:
    matchLabels:
      app: "{{ kube_resource_name }}-redis"
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app: "{{ kube_resource_name }}-redis"
    spec:
      securityContext:
        fsGroup: 1001
      volumes:
        - name: host-sys
          hostPath:
            path: /sys
        - name: "{{ kube_resource_name }}-redis-pv"
          persistentVolumeClaim:
            claimName: "{{ kube_resource_name }}-redis-pvc"
      initContainers:
        - name: disable-thp
          image: "{{ redis_image }}"
          volumeMounts:
            - name: host-sys
              mountPath: /host-sys
          command: ["sh", "-c", "echo never > /host-sys/kernel/mm/transparent_hugepage/enabled"]
      containers:
      - name: redis
        image: "{{ redis_image }}"
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: 1001
        resources:
          requests:
            cpu: 50m
            memory: 50Mi
        ports:
          - containerPort: 6379
        volumeMounts:
          - mountPath: /data
            name: "{{ kube_resource_name }}-redis-pv"
